// ********RoostGPT********
/*
Test generated by RoostGPT for test javaMvnSample using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=addResourceHandlers_ac8819fe1c
ROOST_METHOD_SIG_HASH=addResourceHandlers_ce66a353ba

Scenario 1: Valid Resource Handler Registration

Details:
  TestName: validateResourceHandlerRegistration.
  Description: This test will check if the resource handler is added correctly to the registry with the correct upload directory, cache period, and resource resolver.
Execution:
  Arrange: Create a mock ResourceHandlerRegistry and set up a mock property to return a valid upload directory.
  Act: Call the addResourceHandlers method with the mock registry.
  Assert: Verify that the addResourceHandler, addResourceLocations, setCachePeriod, resourceChain, and addResolver methods were called with the correct parameters.
Validation:
  The assertion verifies that the resource handler is correctly registered with the registry. This is important to ensure that the application can serve static resources from the correct upload directory.

Scenario 2: Invalid Upload Directory

Details:
  TestName: handleInvalidUploadDirectory.
  Description: This test will check how the addResourceHandlers method handles an invalid upload directory.
Execution:
  Arrange: Create a mock ResourceHandlerRegistry and set up a mock property to return an invalid upload directory.
  Act: Call the addResourceHandlers method with the mock registry.
  Assert: Expect an exception to be thrown.
Validation:
  The assertion verifies that the method throws an exception when provided with an invalid upload directory. This is important for error handling and to prevent the application from serving static resources from an incorrect directory.

Scenario 3: Null ResourceHandlerRegistry

Details:
  TestName: handleNullResourceHandlerRegistry.
  Description: This test will check how the addResourceHandlers method handles a null ResourceHandlerRegistry.
Execution:
  Arrange: Set the ResourceHandlerRegistry to null.
  Act: Call the addResourceHandlers method with the null registry.
  Assert: Expect a NullPointerException to be thrown.
Validation:
  The assertion verifies that the method throws a NullPointerException when provided with a null ResourceHandlerRegistry. This is important for error handling and to prevent the application from crashing due to null pointer exceptions.
*/

// ********RoostGPT********
package com.learnk8s.knote;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.resource.PathResourceResolver;

import static org.mockito.Mockito.*;

public class KnoteConfigAddResourceHandlersTest {

	@Mock
	private ResourceHandlerRegistry registry;

	@Mock
	private KnoteProperties properties;

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
    public void validateResourceHandlerRegistration() {
        when(properties.getUploadDir()).thenReturn("/valid/path");
        KnoteConfig config = new KnoteConfig();
        config.setProperties(properties);
        config.addResourceHandlers(registry);
        verify(registry, times(1)).addResourceHandler("/uploads/**");
        verify(registry, times(1)).addResourceLocations("file:/valid/path");
        verify(registry, times(1)).setCachePeriod(3600);
        verify(registry, times(1)).resourceChain(true);
        verify(registry, times(1)).addResolver(any(PathResourceResolver.class));
    }

	@Test(expected = IllegalArgumentException.class)
    public void handleInvalidUploadDirectory() {
        when(properties.getUploadDir()).thenReturn(null);
        KnoteConfig config = new KnoteConfig();
        config.setProperties(properties);
        config.addResourceHandlers(registry);
    }

	@Test(expected = NullPointerException.class)
	public void handleNullResourceHandlerRegistry() {
		KnoteConfig config = new KnoteConfig();
		config.setProperties(properties);
		config.addResourceHandlers(null);
	}

}
