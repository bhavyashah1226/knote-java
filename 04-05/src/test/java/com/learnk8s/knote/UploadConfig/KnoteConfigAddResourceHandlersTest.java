// ********RoostGPT********
/*
Test generated by RoostGPT for test javaMvnSample using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=addResourceHandlers_ac8819fe1c
ROOST_METHOD_SIG_HASH=addResourceHandlers_ce66a353ba

"""
Scenario 1: Successful addition of resource handlers

Details:
  TestName: testSuccessfulAdditionOfResourceHandlers
  Description: This test is meant to check if the resource handlers are added successfully.
Execution:
  Arrange: Mock the ResourceHandlerRegistry and the Properties class to return a valid upload directory.
  Act: Invoke the addResourceHandlers method with the mocked ResourceHandlerRegistry.
  Assert: Use JUnit assertions to verify that addResourceHandler, addResourceLocations, setCachePeriod, resourceChain and addResolver methods are called with the correct parameters.
Validation:
  This assertion aims to verify that the resource handlers are added correctly. The expected result is based on the correct execution of the method. This test is significant as it ensures the correct configuration of the resource handlers.

Scenario 2: Invalid upload directory

Details:
  TestName: testInvalidUploadDirectory
  Description: This test is meant to check the behavior of the method when the upload directory is invalid or null.
Execution:
  Arrange: Mock the ResourceHandlerRegistry and the Properties class to return an invalid upload directory.
  Act: Invoke the addResourceHandlers method with the mocked ResourceHandlerRegistry.
  Assert: Use JUnit assertions to verify that an exception is thrown.
Validation:
  This assertion aims to verify that the method handles invalid upload directory correctly by throwing an exception. This test is significant as it tests the error handling capability of the method.

Scenario 3: Null ResourceHandlerRegistry

Details:
  TestName: testNullResourceHandlerRegistry
  Description: This test is meant to check the behavior of the method when the ResourceHandlerRegistry is null.
Execution:
  Arrange: No need to mock anything, as we will pass null to the method.
  Act: Invoke the addResourceHandlers method with null.
  Assert: Use JUnit assertions to verify that an exception is thrown.
Validation:
  This assertion aims to verify that the method handles null ResourceHandlerRegistry correctly by throwing an exception. This test is significant as it tests the error handling capability of the method.
"""
*/

// ********RoostGPT********
package com.learnk8s.knote;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.resource.PathResourceResolver;
import static org.mockito.Mockito.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@RunWith(MockitoJUnitRunner.class)
public class KnoteConfigAddResourceHandlersTest {

	@Mock
	private KnoteProperties properties;

	@Mock
	private ResourceHandlerRegistry registry;

	@InjectMocks
	private KnoteConfig knoteConfig = new KnoteConfig();

	@Test
    public void testSuccessfulAdditionOfResourceHandlers() {
        when(properties.getUploadDir()).thenReturn("validDirectory");
        knoteConfig.addResourceHandlers(registry);
        verify(registry, times(1)).addResourceHandler("/uploads/**");
        verify(registry, times(1)).addResourceLocations("file:validDirectory");
        verify(registry, times(1)).setCachePeriod(3600);
        verify(registry, times(1)).resourceChain(true);
        verify(registry, times(1)).addResolver(any(PathResourceResolver.class));
    }

	@Test(expected = Exception.class)
    public void testInvalidUploadDirectory() {
        when(properties.getUploadDir()).thenReturn(null);
        knoteConfig.addResourceHandlers(registry);
    }

	@Test(expected = Exception.class)
	public void testNullResourceHandlerRegistry() {
		knoteConfig.addResourceHandlers(null);
	}

}
