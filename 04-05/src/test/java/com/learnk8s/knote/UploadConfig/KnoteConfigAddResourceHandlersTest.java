// ********RoostGPT********
/*
Test generated by RoostGPT for test PlayWright-Test-61 using AI Type Open AI and AI Model gpt-4
ROOST_METHOD_HASH=addResourceHandlers_48286cc0db
ROOST_METHOD_SIG_HASH=addResourceHandlers_289a4a6d21
"""
Scenario 1: Test when the property 'UploadDir' is set correctly
Details:  
  TestName: testWhenUploadDirIsSetCorrectly
  Description: This test verifies that the addResourceHandlers method correctly registers the resource handler when the 'UploadDir' property is set correctly.  
Execution:
  Arrange: Mock the properties object to return a valid directory path when getUploadDir() is called. 
  Act: Call addResourceHandlers and pass the mocked registry object.
  Assert: Verify that 'addResourceHandler', 'addResourceLocations', 'setCachePeriod', 'resourceChain', and 'addResolver' methods are called on the registry object with the correct parameters.
Validation: 
  This test confirms that the addResourceHandlers method correctly registers the resource handler with the correct parameters when the 'UploadDir' property is set correctly. This is crucial because it ensures that the application can correctly serve static resources from the specified upload directory.
Scenario 2: Test when the property 'UploadDir' is not set (null or empty)
Details:  
  TestName: testWhenUploadDirIsNotSet
  Description: This test verifies that the addResourceHandlers method handles the scenario when the 'UploadDir' property is not set.  
Execution:
  Arrange: Mock the properties object to return null or an empty string when getUploadDir() is called. 
  Act: Call addResourceHandlers and pass the mocked registry object.
  Assert: Verify that 'addResourceHandler', 'addResourceLocations', 'setCachePeriod', 'resourceChain', and 'addResolver' methods are not called on the registry object.
Validation: 
  This test confirms that the addResourceHandlers method correctly handles the scenario when the 'UploadDir' property is not set. This is important because it ensures that the application does not crash or behave unexpectedly when the 'UploadDir' property is not configured.
Scenario 3: Test when the registry object is null
Details:  
  TestName: testWhenRegistryObjectIsNull
  Description: This test verifies that the addResourceHandlers method handles the scenario when the registry object is null.  
Execution:
  Arrange: Set the registry object to null.
  Act: Call addResourceHandlers and pass the null registry object.
  Assert: Expect an exception of type NullPointerException.
Validation: 
  This test confirms that the addResourceHandlers method throws a NullPointerException when the registry object is null. This is important for avoiding null pointer exceptions at runtime.
Scenario 4: Test the cache period setting of the resource handler
Details:  
  TestName: testCachePeriodSetting
  Description: This test verifies that the addResourceHandlers method correctly sets the cache period of the resource handler.  
Execution:
  Arrange: Mock the properties object to return a valid directory path when getUploadDir() is called.
  Act: Call addResourceHandlers and pass the mocked registry object.
  Assert: Verify that 'setCachePeriod' method is called on the registry object with the parameter 3600.
Validation: 
  This test confirms that the addResourceHandlers method correctly sets the cache period of the resource handler to 3600. This is important because it ensures that the application correctly caches static resources for the specified period.
Scenario 5: Test the resource chain setting of the resource handler
Details:  
  TestName: testResourceChainSetting
  Description: This test verifies that the addResourceHandlers method correctly sets the resource chain of the resource handler.  
Execution:
  Arrange: Mock the properties object to return a valid directory path when getUploadDir() is called.
  Act: Call addResourceHandlers and pass the mocked registry object.
  Assert: Verify that 'resourceChain' method is called on the registry object with the parameter true.
Validation: 
  This test confirms that the addResourceHandlers method correctly sets the resource chain of the resource handler to true. This is important because it ensures that the application correctly uses the resource chain for serving static resources.
"""
*/
// ********RoostGPT********
package com.learnk8s.knote.UploadConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.resource.PathResourceResolver;
import static org.mockito.Mockito.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.junit.jupiter.api.*;

@Tag("com.learnk8s.knote.UploadConfig")
@Tag("com.learnk8s.knote.UploadConfig.addResourceHandlers")
@Tag("com.learnk8s.knote.UploadConfig.getUploadDir")
public class KnoteConfigAddResourceHandlersTest {
    @Autowired
    private KnoteProperties properties;
    @Mock
    private ResourceHandlerRegistry registry;
    @Mock
    private ResourceHandlerRegistration registration;
    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        when(registry.addResourceHandler(anyString())).thenReturn(registration);
        when(registration.addResourceLocations(anyString())).thenReturn(registration);
        when(registration.setCachePeriod(anyInt())).thenReturn(registration);
        when(registration.resourceChain(anyBoolean())).thenReturn(registration);
        when(registration.addResolver(any(PathResourceResolver.class))).thenReturn(registration);
    }
    @Test
    public void testWhenUploadDirIsSetCorrectly() {
        when(properties.getUploadDir()).thenReturn("/valid/path/to/uploadDir");
        registry.addResourceHandler("/uploads/**").addResourceLocations("file:" + properties.getUploadDir()).setCachePeriod(3600).resourceChain(true).addResolver(new PathResourceResolver());
        verify(registry).addResourceHandler("/uploads/**");
        verify(registration).addResourceLocations("file:/valid/path/to/uploadDir");
        verify(registration).setCachePeriod(3600);
        verify(registration).resourceChain(true);
        verify(registration).addResolver(any(PathResourceResolver.class));
    }
    @Test
    public void testWhenUploadDirIsNotSet() {
        when(properties.getUploadDir()).thenReturn(null);
        registry.addResourceHandler("/uploads/**").addResourceLocations("file:" + properties.getUploadDir()).setCachePeriod(3600).resourceChain(true).addResolver(new PathResourceResolver());
        verify(registry, never()).addResourceHandler(anyString());
        verify(registration, never()).addResourceLocations(anyString());
        verify(registration, never()).setCachePeriod(anyInt());
        verify(registration, never()).resourceChain(anyBoolean());
        verify(registration, never()).addResolver(any(PathResourceResolver.class));
    }
    @Test
    public void testWhenRegistryObjectIsNull() {
        registry = null;
        assertThrows(NullPointerException.class, () -> registry.addResourceHandler("/uploads/**").addResourceLocations("file:" + properties.getUploadDir()).setCachePeriod(3600).resourceChain(true).addResolver(new PathResourceResolver()));
    }
    @Test
    public void testCachePeriodSetting() {
        when(properties.getUploadDir()).thenReturn("/valid/path/to/uploadDir");
        registry.addResourceHandler("/uploads/**").addResourceLocations("file:" + properties.getUploadDir()).setCachePeriod(3600).resourceChain(true).addResolver(new PathResourceResolver());
        verify(registration).setCachePeriod(3600);
    }
    @Test
    public void testResourceChainSetting() {
        when(properties.getUploadDir()).thenReturn("/valid/path/to/uploadDir");
        registry.addResourceHandler("/uploads/**").addResourceLocations("file:" + properties.getUploadDir()).setCachePeriod(3600).resourceChain(true).addResolver(new PathResourceResolver());
        verify(registration).resourceChain(true);
    }
}